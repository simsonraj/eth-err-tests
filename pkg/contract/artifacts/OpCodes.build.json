{
  "id": "b7f8837dd680bd30335b40b8784b5df7",
  "_format": "hh-sol-build-info-1",
  "solcVersion": "0.5.17",
  "solcLongVersion": "0.5.17+commit.d19bba13",
  "input": {
    "language": "Solidity",
    "sources": {
      "src/opCodes.sol": {
        "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity >=0.4.21 <0.6.0;\n\ncontract Test1 {\n    function isSameAddress(address a, address b) public returns(bool){  //Simply add the two arguments and return\n        if (a == b) return true;\n        return false;\n    }\n}\n\ncontract OpCodes {\n\n    Test1 test1;\n\n    constructor() public {  //Constructor function\n        test1 = new Test1();  //Create new \"Test1\" function\n    }\n\n    modifier onlyOwner(address _owner) {\n        require(msg.sender == _owner);\n        _;\n    }\n    // Add a todo to the list\n    function test() public {\n\n        //simple_instructions\n        /*assembly { pop(sub(dup1, mul(dup1, dup1))) }*/\n\n        //keywords\n        assembly { pop(address) return(2, byte(2,1)) }\n\n    //label_complex\n    /*assembly { 7 abc: 8 eq jump(abc) jumpi(eq(7, 8), abc) pop }\n    assembly { pop(jumpi(eq(7, 8), abc)) jump(abc) }*/\n\n    //functional\n    /*assembly { let x := 2 add(7, mul(6, x)) mul(7, 8) add =: x }*/\n\n    //for_statement\n    assembly { for { let i := 1 } lt(i, 5) { i := add(i, 1) } {} }\n    assembly { for { let i := 6 } gt(i, 5) { i := add(i, 1) } {} }\n    assembly { for { let i := 1 } slt(i, 5) { i := add(i, 1) } {} }\n    assembly { for { let i := 6 } sgt(i, 5) { i := add(i, 1) } {} }\n\n    //no_opcodes_in_strict\n    assembly { pop(callvalue()) }\n\n        //no_dup_swap_in_strict\n        /*assembly { swap1() }*/\n\n        //print_functional\n        assembly { let x := mul(sload(0x12), 7) }\n\n        //print_if\n        assembly { if 2 { pop(mload(0)) }}\n\n        //function_definitions_multiple_args\n        assembly { function f(a, d){ mstore(a, d) } function g(a, d) -> x, y {}}\n\n        //sstore\n        assembly { function f(a, d){ sstore(a, d) } function g(a, d) -> x, y {}}\n\n        //mstore8\n        assembly { function f(a, d){ mstore8(a, d) } function g(a, d) -> x, y {}}\n\n        //calldatacopy\n        assembly {\n        let a := mload(0x40)\n        let b := add(a, 32)\n        calldatacopy(a, 4, 32)\n        /*calldatacopy(b, add(4, 32), 32)*/\n        /*result := add(mload(a), mload(b))*/\n        }\n\n        //codecopy\n        assembly {\n        let a := mload(0x40)\n        let b := add(a, 32)\n        codecopy(a, 4, 32)\n        }\n\n        //codecopy\n        assembly {\n        let a := mload(0x40)\n        let b := add(a, 32)\n        extcodecopy(0, a, 4, 32)\n        }\n\n        //for_statement\n        assembly { let x := calldatasize() for { let i := 0} lt(i, x) { i := add(i, 1) } { mstore(i, 2) } }\n\n        //keccak256\n        assembly { pop(keccak256(0,0)) }\n\n        //returndatasize\n        assembly { let r := returndatasize }\n\n        //returndatacopy\n        assembly { returndatacopy(64, 32, 0) }\n        //byzantium vs const Constantinople\n        //staticcall\n        assembly { pop(staticcall(10000, 0x123, 64, 0x10, 128, 0x10)) }\n\n        /*//create2 Constantinople\n        assembly { pop(create2(10, 0x123, 32, 64)) }*/\n\n        //create Constantinople\n        assembly { pop(create(10, 0x123, 32)) }\n\n        //shift Constantinople\n        /*assembly { pop(shl(10, 32)) }\n        assembly { pop(shr(10, 32)) }\n        assembly { pop(sar(10, 32)) }*/\n\n\n        //not\n        assembly { pop( not(0x1f)) }\n\n        //exp\n        assembly { pop( exp(2, 226)) }\n\n        //mod\n        assembly { pop( mod(3, 9)) }\n\n        //smod\n        assembly { pop( smod(3, 9)) }\n\n        //div\n        assembly { pop( div(4, 2)) }\n\n        //sdiv\n        assembly { pop( sdiv(4, 2)) }\n\n        //iszero\n        assembly { pop(iszero(1)) }\n\n        //and\n        assembly { pop(and(2,3)) }\n\n        //or\n        assembly { pop(or(3,3)) }\n\n        //xor\n        assembly { pop(xor(3,3)) }\n\n        //addmod\n        assembly { pop(addmod(3,3,6)) }\n\n        //mulmod\n        assembly { pop(mulmod(3,3,3)) }\n\n        //signextend\n        assembly { pop(signextend(1, 10)) }\n\n        //sha3\n        assembly { pop(calldataload(0)) }\n\n        //blockhash\n        assembly { pop(blockhash(sub(number(), 1))) }\n\n        //balance\n        assembly { pop(balance(0x0)) }\n\n        //caller\n        assembly { pop(caller()) }\n\n        //codesize\n        assembly { pop(codesize()) }\n\n        //extcodesize\n        assembly { pop(extcodesize(0x1)) }\n\n        //origin\n        assembly { pop(origin()) }\n\n        //gas\n        assembly {  pop(gas())}\n\n        //msize\n        assembly {  pop(msize())}\n\n        //pc\n        assembly {  pop(pc())}\n\n        //gasprice\n        assembly {  pop(gasprice())}\n\n        //coinbase\n        assembly {  pop(coinbase())}\n\n        //timestamp\n        assembly {  pop(timestamp())}\n\n        //number\n        assembly {  pop(number())}\n\n        //difficulty\n        assembly {  pop(difficulty())}\n\n        //gaslimit\n        assembly {  pop(gaslimit())}\n\n        //call\n        address contractAddr = address(test1);\n        bytes4 sig = bytes4(keccak256(\"isSameAddress(address,address)\")); //Function signature\n        address a = msg.sender;\n\n        assembly {\n            let x := mload(0x40)   //Find empty storage location using \"free memory pointer\"\n            mstore(x,sig) //Place signature at beginning of empty storage\n            mstore(add(x,0x04),a) // first address parameter. just after signature\n            mstore(add(x,0x24),a) // 2nd address parameter - first padded. add 32 bytes (not 20 bytes)\n            mstore(0x40,add(x,0x64)) // this is missing in other examples. Set free pointer before function call. so it is used by called function.\n        // new free pointer position after the output values of the called function.\n\n            let success := call(\n                5000, //5k gas\n                contractAddr, //To addr\n                0,    //No wei passed\n                x,    // Inputs are at location x\n                0x44, //Inputs size two padded, so 68 bytes\n                x,    //Store output over input\n                0x20) //Output is 32 bytes long\n        }\n\n        //callcode\n        assembly {\n            let x := mload(0x40)   //Find empty storage location using \"free memory pointer\"\n            mstore(x,sig) //Place signature at beginning of empty storage\n            mstore(add(x,0x04),a) // first address parameter. just after signature\n            mstore(add(x,0x24),a) // 2nd address parameter - first padded. add 32 bytes (not 20 bytes)\n            mstore(0x40,add(x,0x64)) // this is missing in other examples. Set free pointer before function call. so it is used by called function.\n        // new free pointer position after the output values of the called function.\n\n            let success := callcode(\n                5000, //5k gas\n                contractAddr, //To addr\n                0,    //No wei passed\n                x,    // Inputs are at location x\n                0x44, //Inputs size two padded, so 68 bytes\n                x,    //Store output over input\n                0x20) //Output is 32 bytes long\n        }\n\n        //delegatecall\n        assembly {\n            let x := mload(0x40)   //Find empty storage location using \"free memory pointer\"\n            mstore(x,sig) //Place signature at beginning of empty storage\n            mstore(add(x,0x04),a) // first address parameter. just after signature\n            mstore(add(x,0x24),a) // 2nd address parameter - first padded. add 32 bytes (not 20 bytes)\n            mstore(0x40,add(x,0x64)) // this is missing in other examples. Set free pointer before function call. so it is used by called function.\n        // new free pointer position after the output values of the called function.\n\n            let success := delegatecall(\n                5000, //5k gas\n                contractAddr, //To addr\n                x,    // Inputs are at location x\n                0x44, //Inputs size two padded, so 68 bytes\n                x,    //Store output over input\n                0x20) //Output is 32 bytes long\n        }\n\n        uint256 _id = 0x420042;\n\n        //log0\n        log0(\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20)\n        );\n\n        //log1\n        log1(\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20)\n        );\n\n        //log2\n        log2(\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(uint256(msg.sender))\n        );\n\n        //log3\n        log3(\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(uint256(msg.sender)),\n            bytes32(_id)\n        );\n\n        //log4\n        log4(\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20),\n            bytes32(uint256(msg.sender)),\n            bytes32(_id),\n            bytes32(_id)\n\n        );\n\n        //selfdestruct\n        assembly { selfdestruct(0x02) }\n    }\n\n    function test_revert() public {\n\n        //revert\n        assembly{ revert(0, 0) }\n    }\n\n    function test_invalid() public {\n\n        //revert\n        assembly{ invalid() }\n    }\n\n    function test_stop() public {\n\n        //revert\n        assembly{ stop() }\n    }\n\n}"
      }
    },
    "settings": {
      "optimizer": {
        "enabled": false,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ],
          "": ["ast"]
        }
      }
    }
  },
  "output": {
    "errors": [
      {
        "component": "general",
        "formattedMessage": "src/opCodes.sol:5:5: Warning: Function state mutability can be restricted to pure\n    function isSameAddress(address a, address b) public returns(bool){  //Simply add the two arguments and return\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
        "message": "Function state mutability can be restricted to pure",
        "severity": "warning",
        "sourceLocation": {
          "end": 264,
          "file": "src/opCodes.sol",
          "start": 94
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "formattedMessage": "src/opCodes.sol:305:5: Warning: Function state mutability can be restricted to pure\n    function test_revert() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
        "message": "Function state mutability can be restricted to pure",
        "severity": "warning",
        "sourceLocation": {
          "end": 9273,
          "file": "src/opCodes.sol",
          "start": 9185
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "formattedMessage": "src/opCodes.sol:311:5: Warning: Function state mutability can be restricted to pure\n    function test_invalid() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
        "message": "Function state mutability can be restricted to pure",
        "severity": "warning",
        "sourceLocation": {
          "end": 9365,
          "file": "src/opCodes.sol",
          "start": 9279
        },
        "type": "Warning"
      },
      {
        "component": "general",
        "formattedMessage": "src/opCodes.sol:317:5: Warning: Function state mutability can be restricted to pure\n    function test_stop() public {\n    ^ (Relevant source part starts here and spans across multiple lines).\n",
        "message": "Function state mutability can be restricted to pure",
        "severity": "warning",
        "sourceLocation": {
          "end": 9451,
          "file": "src/opCodes.sol",
          "start": 9371
        },
        "type": "Warning"
      }
    ],
    "sources": {
      "src/opCodes.sol": {
        "ast": {
          "absolutePath": "src/opCodes.sol",
          "exportedSymbols": {
            "OpCodes": [210],
            "Test1": [20]
          },
          "id": 211,
          "nodeType": "SourceUnit",
          "nodes": [
            {
              "id": 1,
              "literals": ["solidity", ">=", "0.4", ".21", "<", "0.6", ".0"],
              "nodeType": "PragmaDirective",
              "src": "39:32:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 20,
              "linearizedBaseContracts": [20],
              "name": "Test1",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "body": {
                    "id": 18,
                    "nodeType": "Block",
                    "src": "159:105:0",
                    "statements": [
                      {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 12,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 10,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 3,
                            "src": "216:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 11,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 5,
                            "src": "221:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "src": "216:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": null,
                        "id": 15,
                        "nodeType": "IfStatement",
                        "src": "212:23:0",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 13,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "231:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          },
                          "functionReturnParameters": 9,
                          "id": 14,
                          "nodeType": "Return",
                          "src": "224:11:0"
                        }
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 16,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "252:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "functionReturnParameters": 9,
                        "id": 17,
                        "nodeType": "Return",
                        "src": "245:12:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 19,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "isSameAddress",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 6,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 3,
                        "name": "a",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "117:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 2,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "117:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      },
                      {
                        "constant": false,
                        "id": 5,
                        "name": "b",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "128:9:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 4,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "128:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "116:22:0"
                  },
                  "returnParameters": {
                    "id": 9,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 8,
                        "name": "",
                        "nodeType": "VariableDeclaration",
                        "scope": 19,
                        "src": "154:4:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "typeName": {
                          "id": 7,
                          "name": "bool",
                          "nodeType": "ElementaryTypeName",
                          "src": "154:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "153:6:0"
                  },
                  "scope": 20,
                  "src": "94:170:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 211,
              "src": "73:193:0"
            },
            {
              "baseContracts": [],
              "contractDependencies": [20],
              "contractKind": "contract",
              "documentation": null,
              "fullyImplemented": true,
              "id": 210,
              "linearizedBaseContracts": [210],
              "name": "OpCodes",
              "nodeType": "ContractDefinition",
              "nodes": [
                {
                  "constant": false,
                  "id": 22,
                  "name": "test1",
                  "nodeType": "VariableDeclaration",
                  "scope": 210,
                  "src": "292:11:0",
                  "stateVariable": true,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Test1_$20",
                    "typeString": "contract Test1"
                  },
                  "typeName": {
                    "contractScope": null,
                    "id": 21,
                    "name": "Test1",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 20,
                    "src": "292:5:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_Test1_$20",
                      "typeString": "contract Test1"
                    }
                  },
                  "value": null,
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 31,
                    "nodeType": "Block",
                    "src": "331:91:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "id": 29,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftHandSide": {
                            "argumentTypes": null,
                            "id": 25,
                            "name": "test1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 22,
                            "src": "365:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Test1_$20",
                              "typeString": "contract Test1"
                            }
                          },
                          "nodeType": "Assignment",
                          "operator": "=",
                          "rightHandSide": {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 27,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "NewExpression",
                              "src": "373:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_creation_nonpayable$__$returns$_t_contract$_Test1_$20_$",
                                "typeString": "function () returns (contract Test1)"
                              },
                              "typeName": {
                                "contractScope": null,
                                "id": 26,
                                "name": "Test1",
                                "nodeType": "UserDefinedTypeName",
                                "referencedDeclaration": 20,
                                "src": "377:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Test1_$20",
                                  "typeString": "contract Test1"
                                }
                              }
                            },
                            "id": 28,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "373:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_Test1_$20",
                              "typeString": "contract Test1"
                            }
                          },
                          "src": "365:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_Test1_$20",
                            "typeString": "contract Test1"
                          }
                        },
                        "id": 30,
                        "nodeType": "ExpressionStatement",
                        "src": "365:19:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 32,
                  "implemented": true,
                  "kind": "constructor",
                  "modifiers": [],
                  "name": "",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 23,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "321:2:0"
                  },
                  "returnParameters": {
                    "id": 24,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "331:0:0"
                  },
                  "scope": 210,
                  "src": "310:112:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 44,
                    "nodeType": "Block",
                    "src": "463:57:0",
                    "statements": [
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              "id": 40,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 37,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 225,
                                  "src": "481:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 38,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "481:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address_payable",
                                  "typeString": "address payable"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 39,
                                "name": "_owner",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 34,
                                "src": "495:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "src": "481:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            ],
                            "id": 36,
                            "name": "require",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [228, 229],
                            "referencedDeclaration": 228,
                            "src": "473:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                              "typeString": "function (bool) pure"
                            }
                          },
                          "id": 41,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "473:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 42,
                        "nodeType": "ExpressionStatement",
                        "src": "473:29:0"
                      },
                      {
                        "id": 43,
                        "nodeType": "PlaceholderStatement",
                        "src": "512:1:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 45,
                  "name": "onlyOwner",
                  "nodeType": "ModifierDefinition",
                  "parameters": {
                    "id": 35,
                    "nodeType": "ParameterList",
                    "parameters": [
                      {
                        "constant": false,
                        "id": 34,
                        "name": "_owner",
                        "nodeType": "VariableDeclaration",
                        "scope": 45,
                        "src": "447:14:0",
                        "stateVariable": false,
                        "storageLocation": "default",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "typeName": {
                          "id": 33,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "447:7:0",
                          "stateMutability": "nonpayable",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "value": null,
                        "visibility": "internal"
                      }
                    ],
                    "src": "446:16:0"
                  },
                  "src": "428:92:0",
                  "visibility": "internal"
                },
                {
                  "body": {
                    "id": 193,
                    "nodeType": "Block",
                    "src": "578:8601:0",
                    "statements": [
                      {
                        "externalReferences": [],
                        "id": 48,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    pop(address())\n    return(2, byte(2, 1))\n}",
                        "src": "696:46:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 49,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    for { let i := 1 } lt(i, 5) { i := add(i, 1) }\n    { }\n}",
                        "src": "997:62:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 50,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    for { let i := 6 } gt(i, 5) { i := add(i, 1) }\n    { }\n}",
                        "src": "1064:62:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 51,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    for { let i := 1 } slt(i, 5) { i := add(i, 1) }\n    { }\n}",
                        "src": "1131:63:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 52,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    for { let i := 6 } sgt(i, 5) { i := add(i, 1) }\n    { }\n}",
                        "src": "1199:63:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 53,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(callvalue()) }",
                        "src": "1295:29:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 54,
                        "nodeType": "InlineAssembly",
                        "operations": "{ let x := mul(sload(0x12), 7) }",
                        "src": "1427:41:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 55,
                        "nodeType": "InlineAssembly",
                        "operations": "{ if 2 { pop(mload(0)) } }",
                        "src": "1497:34:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 56,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    function f(a, d)\n    { mstore(a, d) }\n    function g(a, d) -> x, y\n    { }\n}",
                        "src": "1586:72:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 57,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    function f(a, d)\n    { sstore(a, d) }\n    function g(a, d) -> x, y\n    { }\n}",
                        "src": "1685:72:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 58,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    function f(a, d)\n    { mstore8(a, d) }\n    function g(a, d) -> x, y\n    { }\n}",
                        "src": "1785:73:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 59,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let a := mload(0x40)\n    let b := add(a, 32)\n    calldatacopy(a, 4, 32)\n}",
                        "src": "1891:198:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 60,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let a := mload(0x40)\n    let b := add(a, 32)\n    codecopy(a, 4, 32)\n}",
                        "src": "2118:104:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 61,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let a := mload(0x40)\n    let b := add(a, 32)\n    extcodecopy(0, a, 4, 32)\n}",
                        "src": "2251:110:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 62,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let x := calldatasize()\n    for { let i := 0 } lt(i, x) { i := add(i, 1) }\n    { mstore(i, 2) }\n}",
                        "src": "2395:99:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 63,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(keccak256(0, 0)) }",
                        "src": "2524:32:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 64,
                        "nodeType": "InlineAssembly",
                        "operations": "{ let r := returndatasize() }",
                        "src": "2591:36:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 65,
                        "nodeType": "InlineAssembly",
                        "operations": "{ returndatacopy(64, 32, 0) }",
                        "src": "2662:38:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 66,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    pop(staticcall(10000, 0x123, 64, 0x10, 128, 0x10))\n}",
                        "src": "2774:63:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 67,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(create(10, 0x123, 32)) }",
                        "src": "2970:39:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 68,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(not(0x1f)) }",
                        "src": "3184:28:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 69,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(exp(2, 226)) }",
                        "src": "3236:30:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 70,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(mod(3, 9)) }",
                        "src": "3290:28:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 71,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(smod(3, 9)) }",
                        "src": "3343:29:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 72,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(div(4, 2)) }",
                        "src": "3396:28:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 73,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(sdiv(4, 2)) }",
                        "src": "3449:29:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 74,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(iszero(1)) }",
                        "src": "3505:27:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 75,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(and(2, 3)) }",
                        "src": "3556:26:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 76,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(or(3, 3)) }",
                        "src": "3605:25:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 77,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(xor(3, 3)) }",
                        "src": "3654:26:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 78,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(addmod(3, 3, 6)) }",
                        "src": "3707:31:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 79,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(mulmod(3, 3, 3)) }",
                        "src": "3765:31:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 80,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(signextend(1, 10)) }",
                        "src": "3827:35:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 81,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(calldataload(0)) }",
                        "src": "3887:33:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 82,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    pop(blockhash(sub(number(), 1)))\n}",
                        "src": "3950:45:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 83,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(balance(0x0)) }",
                        "src": "4023:30:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 84,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(caller()) }",
                        "src": "4080:26:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 85,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(codesize()) }",
                        "src": "4135:28:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 86,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(extcodesize(0x1)) }",
                        "src": "4195:34:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 87,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(origin()) }",
                        "src": "4256:26:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 88,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(gas()) }",
                        "src": "4306:23:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 89,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(msize()) }",
                        "src": "4355:25:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 90,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(pc()) }",
                        "src": "4403:22:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 91,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(gasprice()) }",
                        "src": "4454:28:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 92,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(coinbase()) }",
                        "src": "4511:28:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 93,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(timestamp()) }",
                        "src": "4569:29:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 94,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(number()) }",
                        "src": "4625:26:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 95,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(difficulty()) }",
                        "src": "4682:30:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 96,
                        "nodeType": "InlineAssembly",
                        "operations": "{ pop(gaslimit()) }",
                        "src": "4741:28:0"
                      },
                      {
                        "assignments": [98],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 98,
                            "name": "contractAddr",
                            "nodeType": "VariableDeclaration",
                            "scope": 193,
                            "src": "4794:20:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 97,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4794:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 102,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 100,
                              "name": "test1",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 22,
                              "src": "4825:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_Test1_$20",
                                "typeString": "contract Test1"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_contract$_Test1_$20",
                                "typeString": "contract Test1"
                              }
                            ],
                            "id": 99,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4817:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 101,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4817:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4794:37:0"
                      },
                      {
                        "assignments": [104],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 104,
                            "name": "sig",
                            "nodeType": "VariableDeclaration",
                            "scope": 193,
                            "src": "4841:10:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes4",
                              "typeString": "bytes4"
                            },
                            "typeName": {
                              "id": 103,
                              "name": "bytes4",
                              "nodeType": "ElementaryTypeName",
                              "src": "4841:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes4",
                                "typeString": "bytes4"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 110,
                        "initialValue": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "697353616d654164647265737328616464726573732c6164647265737329",
                                  "id": 107,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "string",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4871:32:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_stringliteral_161e71502cfa7ac78ebef094d81dd09ef9cf93cf206fa05a6d6410c0861e3d96",
                                    "typeString": "literal_string \"isSameAddress(address,address)\""
                                  },
                                  "value": "isSameAddress(address,address)"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_stringliteral_161e71502cfa7ac78ebef094d81dd09ef9cf93cf206fa05a6d6410c0861e3d96",
                                    "typeString": "literal_string \"isSameAddress(address,address)\""
                                  }
                                ],
                                "id": 106,
                                "name": "keccak256",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 219,
                                "src": "4861:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$",
                                  "typeString": "function (bytes memory) pure returns (bytes32)"
                                }
                              },
                              "id": 108,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4861:43:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 105,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "4854:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_bytes4_$",
                              "typeString": "type(bytes4)"
                            },
                            "typeName": "bytes4"
                          },
                          "id": 109,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4854:51:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes4",
                            "typeString": "bytes4"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4841:64:0"
                      },
                      {
                        "assignments": [112],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 112,
                            "name": "a",
                            "nodeType": "VariableDeclaration",
                            "scope": 193,
                            "src": "4936:9:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "typeName": {
                              "id": 111,
                              "name": "address",
                              "nodeType": "ElementaryTypeName",
                              "src": "4936:7:0",
                              "stateMutability": "nonpayable",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 115,
                        "initialValue": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 113,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 225,
                            "src": "4948:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 114,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "4948:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address_payable",
                            "typeString": "address payable"
                          }
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "4936:22:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "sig": {
                              "declaration": 104,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5094:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 112,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5261:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 112,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5178:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "contractAddr": {
                              "declaration": 98,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "5647:12:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 116,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let x := mload(0x40)\n    mstore(x, sig)\n    mstore(add(x, 0x04), a)\n    mstore(add(x, 0x24), a)\n    mstore(0x40, add(x, 0x64))\n    let success := call(5000, contractAddr, 0, x, 0x44, x, 0x20)\n}",
                        "src": "4969:955:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "sig": {
                              "declaration": 104,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "6078:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 112,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "6245:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 112,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "6162:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "contractAddr": {
                              "declaration": 98,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "6635:12:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 117,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let x := mload(0x40)\n    mstore(x, sig)\n    mstore(add(x, 0x04), a)\n    mstore(add(x, 0x24), a)\n    mstore(0x40, add(x, 0x64))\n    let success := callcode(5000, contractAddr, 0, x, 0x44, x, 0x20)\n}",
                        "src": "5953:959:0"
                      },
                      {
                        "externalReferences": [
                          {
                            "sig": {
                              "declaration": 104,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7070:3:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 112,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7237:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "a": {
                              "declaration": 112,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7154:1:0",
                              "valueSize": 1
                            }
                          },
                          {
                            "contractAddr": {
                              "declaration": 98,
                              "isOffset": false,
                              "isSlot": false,
                              "src": "7631:12:0",
                              "valueSize": 1
                            }
                          }
                        ],
                        "id": 118,
                        "nodeType": "InlineAssembly",
                        "operations": "{\n    let x := mload(0x40)\n    mstore(x, sig)\n    mstore(add(x, 0x04), a)\n    mstore(add(x, 0x24), a)\n    mstore(0x40, add(x, 0x64))\n    let success := delegatecall(5000, contractAddr, x, 0x44, x, 0x20)\n}",
                        "src": "6945:925:0"
                      },
                      {
                        "assignments": [120],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 120,
                            "name": "_id",
                            "nodeType": "VariableDeclaration",
                            "scope": 193,
                            "src": "7880:11:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 119,
                              "name": "uint256",
                              "nodeType": "ElementaryTypeName",
                              "src": "7880:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 122,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "3078343230303432",
                          "id": 121,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7894:8:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_4325442_by_1",
                            "typeString": "int_const 4325442"
                          },
                          "value": "0x420042"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "7880:22:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 125,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "7954:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 124,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "7946:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 126,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "7946:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 123,
                            "name": "log0",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 220,
                            "src": "7928:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_log0_nonpayable$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32)"
                            }
                          },
                          "id": 127,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7928:103:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 128,
                        "nodeType": "ExpressionStatement",
                        "src": "7928:103:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 131,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8083:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 130,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8075:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 132,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8075:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 134,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8172:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 133,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8164:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 135,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8164:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 129,
                            "name": "log1",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 221,
                            "src": "8057:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_log1_nonpayable$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32,bytes32)"
                            }
                          },
                          "id": 136,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8057:192:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 137,
                        "nodeType": "ExpressionStatement",
                        "src": "8057:192:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 140,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8301:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 139,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8293:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 141,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8293:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 143,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8390:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 142,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8382:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 144,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8382:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 147,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 225,
                                        "src": "8487:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 148,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "8487:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    ],
                                    "id": 146,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "8479:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": "uint256"
                                  },
                                  "id": 149,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8479:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 145,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8471:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 150,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8471:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 138,
                            "name": "log2",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 222,
                            "src": "8275:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_log2_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32,bytes32,bytes32)"
                            }
                          },
                          "id": 151,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8275:234:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 152,
                        "nodeType": "ExpressionStatement",
                        "src": "8275:234:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 155,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8561:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 154,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8553:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 156,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8553:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 158,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8650:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 157,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8642:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 159,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8642:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 162,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 225,
                                        "src": "8747:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 163,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "8747:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    ],
                                    "id": 161,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "8739:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": "uint256"
                                  },
                                  "id": 164,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "8739:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 160,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8731:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 165,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8731:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 167,
                                  "name": "_id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 120,
                                  "src": "8781:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 166,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8773:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 168,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8773:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 153,
                            "name": "log3",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 223,
                            "src": "8535:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_log3_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32,bytes32,bytes32,bytes32)"
                            }
                          },
                          "id": 169,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8535:260:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 170,
                        "nodeType": "ExpressionStatement",
                        "src": "8535:260:0"
                      },
                      {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 173,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8847:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 172,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8839:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 174,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8839:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "307835306362396665353364616139373337623738366162333634366630346430313530646335306566346537356635393530396438333636376164356164623230",
                                  "id": 176,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "8936:66:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  },
                                  "value": "0x50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb20"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_36544801398802476298763521163789802214445152522789254076924655058611456367392_by_1",
                                    "typeString": "int_const 3654...(69 digits omitted)...7392"
                                  }
                                ],
                                "id": 175,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "8928:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 177,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8928:75:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 180,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 225,
                                        "src": "9033:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 181,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "9033:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address_payable",
                                        "typeString": "address payable"
                                      }
                                    ],
                                    "id": 179,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "9025:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_uint256_$",
                                      "typeString": "type(uint256)"
                                    },
                                    "typeName": "uint256"
                                  },
                                  "id": 182,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "9025:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 178,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9017:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 183,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9017:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 185,
                                  "name": "_id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 120,
                                  "src": "9067:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 184,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9059:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 186,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9059:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 188,
                                  "name": "_id",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 120,
                                  "src": "9093:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "id": 187,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "9085:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_bytes32_$",
                                  "typeString": "type(bytes32)"
                                },
                                "typeName": "bytes32"
                              },
                              "id": 189,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "9085:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              },
                              {
                                "typeIdentifier": "t_bytes32",
                                "typeString": "bytes32"
                              }
                            ],
                            "id": 171,
                            "name": "log4",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 224,
                            "src": "8821:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_log4_nonpayable$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$__$",
                              "typeString": "function (bytes32,bytes32,bytes32,bytes32,bytes32)"
                            }
                          },
                          "id": 190,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "8821:287:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 191,
                        "nodeType": "ExpressionStatement",
                        "src": "8821:287:0"
                      },
                      {
                        "externalReferences": [],
                        "id": 192,
                        "nodeType": "InlineAssembly",
                        "operations": "{ selfdestruct(0x02) }",
                        "src": "9142:31:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 194,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "test",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 46,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "568:2:0"
                  },
                  "returnParameters": {
                    "id": 47,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "578:0:0"
                  },
                  "scope": 210,
                  "src": "555:8624:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 198,
                    "nodeType": "Block",
                    "src": "9215:58:0",
                    "statements": [
                      {
                        "externalReferences": [],
                        "id": 197,
                        "nodeType": "InlineAssembly",
                        "operations": "{ revert(0, 0) }",
                        "src": "9243:24:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 199,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "test_revert",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 195,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9205:2:0"
                  },
                  "returnParameters": {
                    "id": 196,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9215:0:0"
                  },
                  "scope": 210,
                  "src": "9185:88:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 203,
                    "nodeType": "Block",
                    "src": "9310:55:0",
                    "statements": [
                      {
                        "externalReferences": [],
                        "id": 202,
                        "nodeType": "InlineAssembly",
                        "operations": "{ invalid() }",
                        "src": "9338:21:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 204,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "test_invalid",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 200,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9300:2:0"
                  },
                  "returnParameters": {
                    "id": 201,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9310:0:0"
                  },
                  "scope": 210,
                  "src": "9279:86:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                },
                {
                  "body": {
                    "id": 208,
                    "nodeType": "Block",
                    "src": "9399:52:0",
                    "statements": [
                      {
                        "externalReferences": [],
                        "id": 207,
                        "nodeType": "InlineAssembly",
                        "operations": "{ stop() }",
                        "src": "9427:18:0"
                      }
                    ]
                  },
                  "documentation": null,
                  "id": 209,
                  "implemented": true,
                  "kind": "function",
                  "modifiers": [],
                  "name": "test_stop",
                  "nodeType": "FunctionDefinition",
                  "parameters": {
                    "id": 205,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9389:2:0"
                  },
                  "returnParameters": {
                    "id": 206,
                    "nodeType": "ParameterList",
                    "parameters": [],
                    "src": "9399:0:0"
                  },
                  "scope": 210,
                  "src": "9371:80:0",
                  "stateMutability": "nonpayable",
                  "superFunction": null,
                  "visibility": "public"
                }
              ],
              "scope": 211,
              "src": "268:9186:0"
            }
          ],
          "src": "39:9415:0"
        },
        "id": 0
      }
    },
    "contracts": {
      "src/opCodes.sol": {
        "OpCodes": {
          "abi": [
            {
              "inputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "constructor"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "test",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "test_invalid",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "test_revert",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            },
            {
              "constant": false,
              "inputs": [],
              "name": "test_stop",
              "outputs": [],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b5060405161001d9061007e565b604051809103906000f080158015610039573d6000803e3d6000fd5b506000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061008b565b6101438061052283390190565b6104888061009a6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806355313dea146100515780636d3d14161461005b578063b9d1e5aa14610065578063f8a8fd6d1461006f575b600080fd5b610059610079565b005b61006361007b565b005b61006d610080565b005b610077610082565b005b005b600080fd5bfe5b600160021a6002f35b600581101561009f5760018101905061008b565b5060065b60058111156100b7576001810190506100a3565b5060015b60058112156100cf576001810190506100bb565b5060065b60058113156100e7576001810190506100d3565b506002156100f457600051505b60405160208101602060048337505060405160208101602060048339505060405160208101602060048360003c50503660005b8181101561013e5760028152600181019050610127565b505060008020506000602060403e6010608060106040610123612710fa506020610123600af05060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060405180807f697353616d654164647265737328616464726573732c61646472657373290000815250601e01905060405180910390209050600033905060405182815281600482015281602482015260648101604052602081604483600088611388f1505060405182815281600482015281602482015260648101604052602081604483600088611388f250506040518281528160048201528160248201526064810160405260208160448387611388f4505060006242004290507f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a07f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff1660001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a28060001b3373ffffffffffffffffffffffffffffffffffffffff1660001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a38060001b8160001b3373ffffffffffffffffffffffffffffffffffffffff1660001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a46002fffea265627a7a72315820bbd6f33802d8ce24584f29544a95aa5d7b907339edb1fabaf69ca1326c57c92664736f6c63430005110032608060405234801561001057600080fd5b50610123806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063161e715014602d575b600080fd5b608c60048036036040811015604157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505060a6565b604051808215151515815260200191505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141560e3576001905060e8565b600090505b9291505056fea265627a7a723158206ca43ffce5996dcb8796e1f9d729debf22eded181240a1a8a314e4f791d01f2164736f6c63430005110032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH2 0x1D SWAP1 PUSH2 0x7E JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO DUP1 ISZERO PUSH2 0x39 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP PUSH1 0x0 DUP1 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP PUSH2 0x8B JUMP JUMPDEST PUSH2 0x143 DUP1 PUSH2 0x522 DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH2 0x488 DUP1 PUSH2 0x9A PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x55313DEA EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x6D3D1416 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xB9D1E5AA EQ PUSH2 0x65 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x79 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0x7B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6D PUSH2 0x80 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x77 PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST INVALID JUMPDEST PUSH1 0x1 PUSH1 0x2 BYTE PUSH1 0x2 RETURN JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x9F JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x8B JUMP JUMPDEST POP PUSH1 0x6 JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xB7 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA3 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST PUSH1 0x5 DUP2 SLT ISZERO PUSH2 0xCF JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xBB JUMP JUMPDEST POP PUSH1 0x6 JUMPDEST PUSH1 0x5 DUP2 SGT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xD3 JUMP JUMPDEST POP PUSH1 0x2 ISZERO PUSH2 0xF4 JUMPI PUSH1 0x0 MLOAD POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 PUSH1 0x4 DUP4 CALLDATACOPY POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 PUSH1 0x4 DUP4 CODECOPY POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 PUSH1 0x4 DUP4 PUSH1 0x0 EXTCODECOPY POP POP CALLDATASIZE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x13E JUMPI PUSH1 0x2 DUP2 MSTORE PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x127 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 KECCAK256 POP PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 RETURNDATACOPY PUSH1 0x10 PUSH1 0x80 PUSH1 0x10 PUSH1 0x40 PUSH2 0x123 PUSH2 0x2710 STATICCALL POP PUSH1 0x20 PUSH2 0x123 PUSH1 0xA CREATE POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x697353616D654164647265737328616464726573732C61646472657373290000 DUP2 MSTORE POP PUSH1 0x1E ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 DUP9 PUSH2 0x1388 CALL POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 DUP9 PUSH2 0x1388 CALLCODE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 DUP8 PUSH2 0x1388 DELEGATECALL POP POP PUSH1 0x0 PUSH3 0x420042 SWAP1 POP PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG0 PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x0 SHL CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 SHL DUP2 PUSH1 0x0 SHL CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x2 SELFDESTRUCT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xBB 0xD6 RETURN CODESIZE MUL 0xD8 0xCE 0x24 PC 0x4F 0x29 SLOAD 0x4A SWAP6 0xAA 0x5D PUSH28 0x907339EDB1FABAF69CA1326C57C92664736F6C634300051100326080 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x161E7150 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH1 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH1 0xE3 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0xE8 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH13 0xA43FFCE5996DCB8796E1F9D729 0xDE 0xBF 0x22 0xED 0xED XOR SLT BLOCKHASH LOG1 0xA8 LOG3 EQ 0xE4 0xF7 SWAP2 0xD0 0x1F 0x21 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
              "sourceMap": "268:9186:0:-;;;310:112;8:9:-1;5:2;;;30:1;27;20:12;5:2;310:112:0;373:11;;;;;:::i;:::-;;;;;;;;;;;8:9:-1;5:2;;;45:16;42:1;39;24:38;77:16;74:1;67:27;5:2;373:11:0;365:5;;:19;;;;;;;;;;;;;;;;;;268:9186;;;;;;;;;;:::o;:::-;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b506004361061004c5760003560e01c806355313dea146100515780636d3d14161461005b578063b9d1e5aa14610065578063f8a8fd6d1461006f575b600080fd5b610059610079565b005b61006361007b565b005b61006d610080565b005b610077610082565b005b005b600080fd5bfe5b600160021a6002f35b600581101561009f5760018101905061008b565b5060065b60058111156100b7576001810190506100a3565b5060015b60058112156100cf576001810190506100bb565b5060065b60058113156100e7576001810190506100d3565b506002156100f457600051505b60405160208101602060048337505060405160208101602060048339505060405160208101602060048360003c50503660005b8181101561013e5760028152600181019050610127565b505060008020506000602060403e6010608060106040610123612710fa506020610123600af05060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050600060405180807f697353616d654164647265737328616464726573732c61646472657373290000815250601e01905060405180910390209050600033905060405182815281600482015281602482015260648101604052602081604483600088611388f1505060405182815281600482015281602482015260648101604052602081604483600088611388f250506040518281528160048201528160248201526064810160405260208160448387611388f4505060006242004290507f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a07f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a13373ffffffffffffffffffffffffffffffffffffffff1660001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a28060001b3373ffffffffffffffffffffffffffffffffffffffff1660001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a38060001b8160001b3373ffffffffffffffffffffffffffffffffffffffff1660001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b7f50cb9fe53daa9737b786ab3646f04d0150dc50ef4e75f59509d83667ad5adb2060001b6040518082815260200191505060405180910390a46002fffea265627a7a72315820bbd6f33802d8ce24584f29544a95aa5d7b907339edb1fabaf69ca1326c57c92664736f6c63430005110032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4C JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x55313DEA EQ PUSH2 0x51 JUMPI DUP1 PUSH4 0x6D3D1416 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0xB9D1E5AA EQ PUSH2 0x65 JUMPI DUP1 PUSH4 0xF8A8FD6D EQ PUSH2 0x6F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x59 PUSH2 0x79 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x63 PUSH2 0x7B JUMP JUMPDEST STOP JUMPDEST PUSH2 0x6D PUSH2 0x80 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x77 PUSH2 0x82 JUMP JUMPDEST STOP JUMPDEST STOP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST INVALID JUMPDEST PUSH1 0x1 PUSH1 0x2 BYTE PUSH1 0x2 RETURN JUMPDEST PUSH1 0x5 DUP2 LT ISZERO PUSH2 0x9F JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x8B JUMP JUMPDEST POP PUSH1 0x6 JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH2 0xB7 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xA3 JUMP JUMPDEST POP PUSH1 0x1 JUMPDEST PUSH1 0x5 DUP2 SLT ISZERO PUSH2 0xCF JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xBB JUMP JUMPDEST POP PUSH1 0x6 JUMPDEST PUSH1 0x5 DUP2 SGT ISZERO PUSH2 0xE7 JUMPI PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0xD3 JUMP JUMPDEST POP PUSH1 0x2 ISZERO PUSH2 0xF4 JUMPI PUSH1 0x0 MLOAD POP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 PUSH1 0x4 DUP4 CALLDATACOPY POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 PUSH1 0x4 DUP4 CODECOPY POP POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 ADD PUSH1 0x20 PUSH1 0x4 DUP4 PUSH1 0x0 EXTCODECOPY POP POP CALLDATASIZE PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x13E JUMPI PUSH1 0x2 DUP2 MSTORE PUSH1 0x1 DUP2 ADD SWAP1 POP PUSH2 0x127 JUMP JUMPDEST POP POP PUSH1 0x0 DUP1 KECCAK256 POP PUSH1 0x0 PUSH1 0x20 PUSH1 0x40 RETURNDATACOPY PUSH1 0x10 PUSH1 0x80 PUSH1 0x10 PUSH1 0x40 PUSH2 0x123 PUSH2 0x2710 STATICCALL POP PUSH1 0x20 PUSH2 0x123 PUSH1 0xA CREATE POP PUSH1 0x0 DUP1 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 POP PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP1 PUSH32 0x697353616D654164647265737328616464726573732C61646472657373290000 DUP2 MSTORE POP PUSH1 0x1E ADD SWAP1 POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 SWAP1 POP PUSH1 0x0 CALLER SWAP1 POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 DUP9 PUSH2 0x1388 CALL POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 PUSH1 0x0 DUP9 PUSH2 0x1388 CALLCODE POP POP PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE DUP2 PUSH1 0x4 DUP3 ADD MSTORE DUP2 PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x20 DUP2 PUSH1 0x44 DUP4 DUP8 PUSH2 0x1388 DELEGATECALL POP POP PUSH1 0x0 PUSH3 0x420042 SWAP1 POP PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG0 PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 DUP1 PUSH1 0x0 SHL CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 DUP1 PUSH1 0x0 SHL DUP2 PUSH1 0x0 SHL CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH32 0x50CB9FE53DAA9737B786AB3646F04D0150DC50EF4E75F59509D83667AD5ADB20 PUSH1 0x0 SHL PUSH1 0x40 MLOAD DUP1 DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG4 PUSH1 0x2 SELFDESTRUCT INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 0xBB 0xD6 RETURN CODESIZE MUL 0xD8 0xCE 0x24 PC 0x4F 0x29 SLOAD 0x4A SWAP6 0xAA 0x5D PUSH28 0x907339EDB1FABAF69CA1326C57C92664736F6C634300051100320000 ",
              "sourceMap": "268:9186:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;268:9186:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9371:80;;;:::i;:::-;;9185:88;;;:::i;:::-;;9279:86;;;:::i;:::-;;555:8624;;;:::i;:::-;;9371:80;9437:6;9185:88;9263:1;9260;9253:12;9279:86;9348:9;555:8624;737:1;735;730:9;727:1;720:20;1008:49;1033:1;1030;1027:8;1008:49;;;1050:1;1047;1043:9;1038:14;;1008:49;;;1012:14;1090:1;1075:49;1100:1;1097;1094:8;1075:49;;;1117:1;1114;1110:9;1105:14;;1075:49;;;1079:14;1157:1;1142:50;1168:1;1165;1161:9;1142:50;;;1185:1;1182;1178:9;1173:14;;1142:50;;;1146:14;1225:1;1210:50;1236:1;1233;1229:9;1210:50;;;1253:1;1250;1246:9;1241:14;;1210:50;;;1214:14;1511:1;1508:2;;;1525:1;1519:8;1515:13;1508:2;1925:4;1919:11;1955:2;1952:1;1948:10;1986:2;1983:1;1980;1967:22;1900:189;;2152:4;2146:11;2182:2;2179:1;2175:10;2209:2;2206:1;2203;2194:18;2127:95;;2285:4;2279:11;2315:2;2312:1;2308:10;2348:2;2345:1;2342;2339;2327:24;2260:101;;2415:14;2445:1;2430:62;2454:1;2451;2448:8;2430:62;;;2488:1;2485;2478:12;2471:1;2468;2464:9;2459:14;;2430:62;;;2434:13;2404:90;2551:1;2549;2539:14;2535:19;2696:1;2692:2;2688;2673:25;2829:4;2824:3;2818:4;2814:2;2807:5;2800;2789:45;2785:50;3003:2;2996:5;2992:2;2985:21;2981:26;4794:20;4825:5;;;;;;;;;;;4794:37;;4841:10;4861:43;;;;;;;;;;;;;;;;;;;4841:64;;4936:9;4948:10;4936:22;;5007:4;5001:11;5094:3;5092:1;5085:13;5178:1;5172:4;5170:1;5166:11;5159:21;5261:1;5255:4;5253:1;5249:11;5242:21;5363:4;5361:1;5357:11;5352:4;5345:24;5883:4;5835:1;5775:4;5725:1;5687;5647:12;5616:4;5594:294;4978:946;;5991:4;5985:11;6078:3;6076:1;6069:13;6162:1;6156:4;6154:1;6150:11;6143:21;6245:1;6239:4;6237:1;6233:11;6226:21;6347:4;6345:1;6341:11;6336:4;6329:24;6871:4;6823:1;6763:4;6713:1;6675;6635:12;6604:4;6578:298;5962:950;;6983:4;6977:11;7070:3;7068:1;7061:13;7154:1;7148:4;7146:1;7142:11;7135:21;7237:1;7231:4;7229:1;7225:11;7218:21;7339:4;7337:1;7333:11;7328:4;7321:24;7829:4;7781:1;7721:4;7671:1;7631:12;7600:4;7570:264;6954:916;;7880:11;7894:8;7880:22;;7954:66;7946:75;;7928:103;;;;;;;;;;;;;;;;;;8172:66;8164:75;;8083:66;8075:75;;8057:192;;;;;;;;;;;;;;;;;;8487:10;8479:19;;8471:28;;8390:66;8382:75;;8301:66;8293:75;;8275:234;;;;;;;;;;;;;;;;;;8781:3;8773:12;;8747:10;8739:19;;8731:28;;8650:66;8642:75;;8561:66;8553:75;;8535:260;;;;;;;;;;;;;;;;;;9093:3;9085:12;;9067:3;9059:12;;9033:10;9025:19;;9017:28;;8936:66;8928:75;;8847:66;8839:75;;8821:287;;;;;;;;;;;;;;;;;;9166:4;9153:18"
            },
            "methodIdentifiers": {
              "test()": "f8a8fd6d",
              "test_invalid()": "b9d1e5aa",
              "test_revert()": "6d3d1416",
              "test_stop()": "55313dea"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"constant\":false,\"inputs\":[],\"name\":\"test\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test_invalid\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test_revert\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"test_stop\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/opCodes.sol\":\"OpCodes\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/opCodes.sol\":{\"keccak256\":\"0xee67b66471225dcd401fac80754ffad525d2aacafc8e6f7e26f76652e05baeec\",\"urls\":[\"bzz-raw://a6c9ce29c2de880d511aa40ad5f59fa424934be38811f896d7f6d02b4a27582d\",\"dweb:/ipfs/QmWPBX7b1W6iMvcWCTofZJNePu6ZVPuSvSC8u7pfRfJQ98\"]}},\"version\":1}"
        },
        "Test1": {
          "abi": [
            {
              "constant": false,
              "inputs": [
                {
                  "internalType": "address",
                  "name": "a",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "b",
                  "type": "address"
                }
              ],
              "name": "isSameAddress",
              "outputs": [
                {
                  "internalType": "bool",
                  "name": "",
                  "type": "bool"
                }
              ],
              "payable": false,
              "stateMutability": "nonpayable",
              "type": "function"
            }
          ],
          "evm": {
            "bytecode": {
              "linkReferences": {},
              "object": "608060405234801561001057600080fd5b50610123806100206000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063161e715014602d575b600080fd5b608c60048036036040811015604157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505060a6565b604051808215151515815260200191505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141560e3576001905060e8565b600090505b9291505056fea265627a7a723158206ca43ffce5996dcb8796e1f9d729debf22eded181240a1a8a314e4f791d01f2164736f6c63430005110032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x123 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x161E7150 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH1 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH1 0xE3 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0xE8 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH13 0xA43FFCE5996DCB8796E1F9D729 0xDE 0xBF 0x22 0xED 0xED XOR SLT BLOCKHASH LOG1 0xA8 LOG3 EQ 0xE4 0xF7 SWAP2 0xD0 0x1F 0x21 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
              "sourceMap": "73:193:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;73:193:0;;;;;;;"
            },
            "deployedBytecode": {
              "linkReferences": {},
              "object": "6080604052348015600f57600080fd5b506004361060285760003560e01c8063161e715014602d575b600080fd5b608c60048036036040811015604157600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505060a6565b604051808215151515815260200191505060405180910390f35b60008173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141560e3576001905060e8565b600090505b9291505056fea265627a7a723158206ca43ffce5996dcb8796e1f9d729debf22eded181240a1a8a314e4f791d01f2164736f6c63430005110032",
              "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH1 0x28 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x161E7150 EQ PUSH1 0x2D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8C PUSH1 0x4 DUP1 CALLDATASIZE SUB PUSH1 0x40 DUP2 LT ISZERO PUSH1 0x41 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ADD SWAP1 DUP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 DUP1 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH1 0x20 ADD SWAP1 SWAP3 SWAP2 SWAP1 POP POP POP PUSH1 0xA6 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 ISZERO ISZERO ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO PUSH1 0xE3 JUMPI PUSH1 0x1 SWAP1 POP PUSH1 0xE8 JUMP JUMPDEST PUSH1 0x0 SWAP1 POP JUMPDEST SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH6 0x627A7A723158 KECCAK256 PUSH13 0xA43FFCE5996DCB8796E1F9D729 0xDE 0xBF 0x22 0xED 0xED XOR SLT BLOCKHASH LOG1 0xA8 LOG3 EQ 0xE4 0xF7 SWAP2 0xD0 0x1F 0x21 PUSH5 0x736F6C6343 STOP SDIV GT STOP ORIGIN ",
              "sourceMap": "73:193:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;73:193:0;;;;;;;;;;;;;;;;;;;94:170;;;;;;13:2:-1;8:3;5:11;2:2;;;29:1;26;19:12;2:2;94:170:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;154:4;221:1;216:6;;:1;:6;;;212:23;;;231:4;224:11;;;;212:23;252:5;245:12;;94:170;;;;;:::o"
            },
            "methodIdentifiers": {
              "isSameAddress(address,address)": "161e7150"
            }
          },
          "metadata": "{\"compiler\":{\"version\":\"0.5.17+commit.d19bba13\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"internalType\":\"address\",\"name\":\"a\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"b\",\"type\":\"address\"}],\"name\":\"isSameAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"src/opCodes.sol\":\"Test1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"src/opCodes.sol\":{\"keccak256\":\"0xee67b66471225dcd401fac80754ffad525d2aacafc8e6f7e26f76652e05baeec\",\"urls\":[\"bzz-raw://a6c9ce29c2de880d511aa40ad5f59fa424934be38811f896d7f6d02b4a27582d\",\"dweb:/ipfs/QmWPBX7b1W6iMvcWCTofZJNePu6ZVPuSvSC8u7pfRfJQ98\"]}},\"version\":1}"
        }
      }
    }
  }
}
