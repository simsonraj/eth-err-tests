package contract

import (
	"bytes"
	_ "embed"
	"encoding/json"
	"fmt"

	"github.com/ethereum/go-ethereum/accounts/abi"
)

//go:embed artifacts/Storage.json
var storageJSON []byte

//go:embed artifacts/OpCodes.json
var opCodesJSON []byte

//go:embed artifacts/TestKeccak.json
var testKeccakJSON []byte

// ABI is the golang representation of the json file generated by solc.
type ABI struct {
	Format                 string          `json:"_format"`
	ContractName           string          `json:"contractName"`
	SourceName             string          `json:"sourceName"`
	Abi                    json.RawMessage `json:"abi"`
	Bytecode               string          `json:"bytecode"`
	DeployedBytecode       string          `json:"deployedBytecode"`
	LinkReferences         struct{}        `json:"linkReferences"`
	DeployedLinkReferences struct{}        `json:"deployedLinkReferences"`
}

type Artifact struct {
	Abi      abi.ABI `json:"abi"`
	Bytecode string  `json:"bytecode"`
}

type Name string

const (
	Storage    Name = "storage"
	OpCodes    Name = "opcodes"
	TestKeccak Name = "testkeccak"
)

func loadContract(jsonFile []byte) *ABI {
	var abi ABI
	_ = json.Unmarshal(jsonFile, &abi)
	return &abi
}

func ArtifactFromContract(name Name) (Artifact, error) {
	var contractJSON *ABI

	switch name {
	case Storage:
		contractJSON = loadContract(storageJSON)
	case OpCodes:
		contractJSON = loadContract(opCodesJSON)
	case TestKeccak:
		contractJSON = loadContract(testKeccakJSON)
	default:
		return Artifact{}, fmt.Errorf("contract name (%s) not found", name)
	}

	abiReader := bytes.NewReader(contractJSON.Abi)
	abi, err := abi.JSON(abiReader)
	if err != nil {
		return Artifact{}, err
	}

	return Artifact{
		Abi:      abi,
		Bytecode: contractJSON.Bytecode,
	}, nil
}

func BuildInput(contract Name, method string, args ...interface{}) ([]byte, error) {
	artifact, err := ArtifactFromContract(contract)
	if err != nil {
		return nil, fmt.Errorf("error parsing ABI: %w", err)
	}

	input, err := artifact.Abi.Pack(method, args...)
	if err != nil {
		return nil, fmt.Errorf("error packing ABI: %w", err)
	}

	return input, nil
}
